;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : DTMF_LCD
;Version :
;Date    : 5/17/2022
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16A
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <string.h>
;
;// Declare your global variables here
;int keydetect = 0;
;int i = 0;
;char* password = "1234";

	.DSEG
_0x3:
	.BYTE 0x5
;int password_len = 4;
;char* current_password = "";
_0x4:
	.BYTE 0x1
;char* new_password = "";
_0x5:
	.BYTE 0x1
;char current_char = '';
;int prog_mode = 0;
;
;//Declaring Functions
;char get_char();
;int check_password();
;
;interrupt[EXT_INT0] void ext_int0_isr(void){
; 0000 002C interrupt[2] void ext_int0_isr(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D 
; 0000 002E   keydetect = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002F   delay_ms(250);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;interrupt[EXT_INT1] void ext_int1_isr(void){
; 0000 0032 interrupt[3] void ext_int1_isr(void){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0033   //Start Timer
; 0000 0034 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0035 
; 0000 0036 }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;interrupt[EXT_INT2] void ext_int2_isr(void){
; 0000 0038 interrupt[19] void ext_int2_isr(void){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0039 delay_ms(200);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003A   //Stop Timer
; 0000 003B   TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003C     //Reset Timer
; 0000 003D   TCNT1H=0xAB;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003E   TCNT1L=0xA0;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003F   ICR1H=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0040   ICR1L=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0041   OCR1AH=0x54;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0042   OCR1AL=0x5F;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0043   OCR1BH=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0044   OCR1BL=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0045 
; 0000 0046 //Checking New Password
; 0000 0047          if(strlen(new_password) > 0){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0048             strcpy(password,new_password);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0049             password_len = strlen(new_password);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004A             new_password = strcpy(new_password,"");
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B          }
; 0000 004C 
; 0000 004D   //Reset programming Mode
; 0000 004E   lcd_clear();
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004F   lcd_gotoxy(0,0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0050   delay_ms(10);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0051   lcd_puts("Enter Password:");
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0052   delay_ms(250);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0053   prog_mode = 0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0054   i=0;
;PCODE: $00000056 VOL: 0
; 0000 0055 
; 0000 0056 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0

	.DSEG
_0x8:
	.BYTE 0x11
;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 005A {

	.CSEG
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005C // Place your code here
; 0000 005D     prog_mode = 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005E     lcd_clear();
;PCODE: $00000060 VOL: 0
; 0000 005F     delay_ms(10);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0060     i=0;
;PCODE: $00000064 VOL: 0
; 0000 0061     lcd_gotoxy(0,1);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0062     lcd_puts(password);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0063     delay_ms(10);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0064 }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;
;
;void main(void)
; 0000 0069 {
;PCODE: $00000071 VOL: 0
; 0000 006A // Declare your local variables here
; 0000 006B 
; 0000 006C // Input/Output Ports initialization
; 0000 006D // Port A initialization
; 0000 006E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0070 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0071 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0072 
; 0000 0073 // Port B initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0078 
; 0000 0079 // Port C initialization
; 0000 007A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 007E 
; 0000 007F // Port D initialization
; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0083 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0084 
; 0000 0085 // Alphanumeric LCD initialization
; 0000 0086 // Connections are specified in the
; 0000 0087 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0088 // RS - PORTA Bit 0
; 0000 0089 // RD - PORTA Bit 2
; 0000 008A // EN - PORTA Bit 1
; 0000 008B // D4 - PORTA Bit 4
; 0000 008C // D5 - PORTA Bit 5
; 0000 008D // D6 - PORTA Bit 6
; 0000 008E // D7 - PORTA Bit 7
; 0000 008F // Characters/line: 16
; 0000 0090 lcd_init(16);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0091 
; 0000 0092 
; 0000 0093 GICR |= (1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0094 MCUCR = (1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0095 MCUCSR = (0<<ISC2);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0096 GIFR = (1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0097 
; 0000 0098 
; 0000 0099 
; 0000 009A // Timer/Counter 1 initialization
; 0000 009B // Clock source: System Clock
; 0000 009C // Clock value: 10.800 kHz
; 0000 009D // Mode: CTC top=OCR1A
; 0000 009E // OC1A output: Disconnected
; 0000 009F // OC1B output: Disconnected
; 0000 00A0 // Noise Canceler: Off
; 0000 00A1 // Input Capture on Rising Edge
; 0000 00A2 // Timer Period: 2 s
; 0000 00A3 // Timer1 Overflow Interrupt: Off
; 0000 00A4 // Input Capture Interrupt: Off
; 0000 00A5 // Compare A Match Interrupt: On
; 0000 00A6 // Compare B Match Interrupt: Off
; 0000 00A7 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00A8 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A9 TCNT1H=0xAB;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00AA TCNT1L=0xA0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AB ICR1H=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AC ICR1L=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00AD OCR1AH=0x54;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AE OCR1AL=0x5F;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00AF OCR1BH=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B0 OCR1BL=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B1 
; 0000 00B2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B3 
; 0000 00B4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B5 
; 0000 00B6 
; 0000 00B7 
; 0000 00B8 #asm("sei");
;PCODE: $000000A3 VOL: 0
	sei
;PCODE: $000000A4 VOL: 0
; 0000 00B9 
; 0000 00BA           lcd_gotoxy(0,0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00BB           delay_ms(10);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00BC           lcd_puts("Enter Password:");
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00BD           delay_ms(10);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BE 
; 0000 00BF while (1)
;PCODE: $000000B2 VOL: 0
; 0000 00C0       {
; 0000 00C1       // Place your code here
; 0000 00C2       if(prog_mode == 0){
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00C3           if (i > 15){
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00C4             lcd_clear();
;PCODE: $000000B9 VOL: 0
; 0000 00C5             i = 0;
;PCODE: $000000BA VOL: 0
; 0000 00C6             }
; 0000 00C7 
; 0000 00C8           if(keydetect){
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C9              keydetect = 0;
;PCODE: $000000BE VOL: 0
; 0000 00CA              current_char = get_char();
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00CB              delay_ms(10);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00CC              lcd_gotoxy(i,1);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00CD              delay_ms(10);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00CE              lcd_putchar(current_char);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00CF              delay_ms(10);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00D0              i++;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00D1              current_password = strncat(current_password,&current_char,1);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D2 
; 0000 00D3           }
; 0000 00D4 
; 0000 00D5           if(strlen(current_password) == password_len){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00D6             if(check_password()){
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00D7                  lcd_clear();
;PCODE: $000000E0 VOL: 0
; 0000 00D8                  lcd_gotoxy(0,0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00D9                  delay_ms(10);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00DA 
; 0000 00DB                  lcd_puts("Correct Password");
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00DC                  delay_ms(2000);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00DD                  lcd_clear();
;PCODE: $000000ED VOL: 0
; 0000 00DE             }else{
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00DF                  lcd_clear();
;PCODE: $000000F0 VOL: 0
; 0000 00E0                  lcd_gotoxy(0,0);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00E1                  delay_ms(10);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00E2 
; 0000 00E3                  lcd_puts("Wrong Password");
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E4                  delay_ms(2000);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00E5                  lcd_clear();
;PCODE: $000000FD VOL: 0
; 0000 00E6             }
;PCODE: $000000FE VOL: 0
; 0000 00E7             i=0;
;PCODE: $000000FF VOL: 0
; 0000 00E8             strcpy(current_password,"");
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00E9             lcd_gotoxy(0,0);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00EA           delay_ms(10);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00EB           lcd_puts("Enter Password:");
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00EC           delay_ms(10);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00ED           }
; 0000 00EE        }
;PCODE: $00000111 VOL: 0
; 0000 00EF       else{
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00F0        //Programming Mode
; 0000 00F1        lcd_gotoxy(0,0);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00F2       delay_ms(10);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00F3           lcd_puts("New Password:");
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00F4           delay_ms(10);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00F5 
; 0000 00F6           if (i > 15){
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00F7             lcd_clear();
;PCODE: $00000124 VOL: 0
; 0000 00F8             i = 0;
;PCODE: $00000125 VOL: 0
; 0000 00F9             }
; 0000 00FA 
; 0000 00FB           if(keydetect){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00FC              keydetect = 0;
;PCODE: $00000129 VOL: 0
; 0000 00FD              current_char = get_char();
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00FE              lcd_gotoxy(i,1);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00FF              delay_ms(10);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0100              lcd_putchar(current_char);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0101              delay_ms(10);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0102              i++;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0103              new_password = strncat(new_password,&current_char,1);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0104 
; 0000 0105           }
; 0000 0106 
; 0000 0107       }
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0108     }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0109 }
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0

	.DSEG
_0x9:
	.BYTE 0x4F
;
;char get_char()
; 0000 010C {

	.CSEG
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 010D 
; 0000 010E      switch (PINC & 0x0F)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 010F 			{
; 0000 0110 				case (0x01):
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0111                 return '1';
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0112 
; 0000 0113 				case (0x02):
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0114 				return '2';;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0115 
; 0000 0116 				case (0x03):
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0117 				return '3';;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0118 
; 0000 0119 				case (0x04):
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 011A 				return '4';
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 011B 
; 0000 011C 				case (0x05):
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 011D 				return '5';
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 011E 
; 0000 011F 				case (0x06):
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0120 				return '6';
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0121 
; 0000 0122 				case (0x07):
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0123 				return '7';
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0124 
; 0000 0125 				case (0x08):
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0126 				return '8';
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0127 
; 0000 0128 				case (0x09):
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0129 				return '9';
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 012A 
; 0000 012B 				case (0x0A):
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 012C 				return '0';
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 012D 
; 0000 012E 				case (0x0B):
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 012F 				return '*';
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0130 
; 0000 0131 				case (0x0C):
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0132 				return '#';
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0133 
; 0000 0134 				default:
;PCODE: $00000187 VOL: 0
; 0000 0135 				break;
;PCODE: $00000188 VOL: 0
; 0000 0136 			}
;PCODE: $00000189 VOL: 0
; 0000 0137 
; 0000 0138 }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;
;int check_password()
; 0000 013B {
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 013C             if(strcmp(current_password,password) == 0)
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 013D             {
; 0000 013E                  return 1;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 013F 
; 0000 0140             }else{
;PCODE: $00000195 VOL: 0
; 0000 0141                  return 0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0142             }
;PCODE: $00000198 VOL: 0
; 0000 0143 }
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
